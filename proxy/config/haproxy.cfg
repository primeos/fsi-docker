global
  log /var/log/haproxy.log local0

# TODO
defaults
  log global
  timeout client 30s
  timeout server 30s
  timeout connect 5s
  #source 0.0.0.0 usesrc clientip
  # Ignore dead servers:
  option persist
  no option redispatch

# HTTP frontent
frontend ft_http
  bind :80
  mode http
  default_backend bk_http

# HTTPS frontent
frontend ft_https
  bind :443
  mode tcp
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  default_backend bk_https

# Use the host header for the routing decision
backend bk_http
  mode http
  acl kogni_homepage hdr(host) -i www.fs-kogni.uni-tuebingen.de
  use-server server_kogni if kogni_homepage
  # ACME catch-all (keep this after kogni_homepage, etc.):
  acl acme_sh path_beg -i /.well-known/acme-challenge/
  acl http_redir hdr(host) -i dudle.fsi.uni-tuebingen.de
  acl http_redir hdr(host) -i pad.fsi.uni-tuebingen.de
  acl http_redir hdr(host) -i cloud.fsi.uni-tuebingen.de
  acl http_redir hdr(host) -i git.fsi.uni-tuebingen.de
  acl http_redir hdr(host) -i proxy.fsi.uni-tuebingen.de
  acl http_redir hdr(host) -i fachschaftsempfaenger.fsi.uni-tuebingen.de
  acl http_redir hdr(host) -i wiki.fsi.uni-tuebingen.de
  use-server server_acme_sh if acme_sh
  use-server server_http_redir if http_redir
  #redirect codimd to https because it can't do itself... and because it is much simpler here than creating additional rules in frontend ft_http
  # => do not redirect, this causes issues with ACL. We use a seperate container for redirecting....
  #redirect scheme https code 302 if !acme_sh
  #if { hdr(Host) -i pad.fsi.uni-tuebingen.de } unless { path_beg -i /.well-known/acme-challenge }
  #!{ ssl_fc acme_sh }
  #redirect scheme https code 302 if { hdr(Host) -i cloud.fsi.uni-tuebingen.de } !{ ssl_fc !acme_sh }
  #redirect scheme https code 301 if { hdr(Host) -i www.fs-kogni.uni-tuebingen.de } !{ ssl_fc !acme_sh }
 # use-server server_dudle if dudle
  #use-server server_default if !kogni_homepage #!fsi_codimd #!acme_sh
  dispatch 134.2.220.61:8002 # Default server
#  server server_dudle 134.2.220.61:8888 check
  server server_kogni 192.168.134.85:80 check
  server server_acme_sh 134.2.220.61:8004 check
  server server_http_redir 134.2.220.61:8100 check
  #server server_default 134.2.220.61:8000 check

# Use SNI for the routing decision
backend bk_https
  mode tcp
  acl kogni_homepage req_ssl_sni -i www.fs-kogni.uni-tuebingen.de
  acl fsi_codimd req_ssl_sni -i pad.fsi.uni-tuebingen.de
  acl fsi_cloud req_ssl_sni -i cloud.fsi.uni-tuebingen.de
  acl fsi_git req_ssl_sni -i git.fsi.uni-tuebingen.de
  acl fsi_proxy req_ssl_sni -i proxy.fsi.uni-tuebingen.de
  acl fsi_fse req_ssl_sni -i fachschaftsempfaenger.fsi.uni-tuebingen.de
  acl fsi_dokuwiki req_ssl_sni -i wiki.fsi.uni-tuebingen.de
  # Invalid for HTTPS:
  #http-request reject if !kogni_homepage !fsi_codimd !fsi_cloud
  use-server server_kogni if kogni_homepage
  use-server server_fsi_codimd if fsi_codimd
  use-server server_fsi_cloud if fsi_cloud
  use-server server_fsi_git if fsi_git
  use-server server_fsi_proxy if fsi_proxy
  use-server server_fsi_fse if fsi_fse
  use-server server_fsi_dokuwiki if fsi_dokuwiki
  #use-server server_default if !kogni_homepage !fsi_codimd
  dispatch 134.2.220.61:8001 # Default server
  option ssl-hello-chk
  server server_fsi_codimd 134.2.220.61:8010 check
  server server_kogni 192.168.134.85:443 check
  #server server_fsi_cloud 10.0.1.2:443 check
  server server_fsi_cloud 134.2.220.61:8090 check
  server server_fsi_git 134.2.220.61:8200 check
  server server_fsi_proxy 134.2.220.61:8500 check
  server server_fsi_fse 134.2.220.61:8600 check
  server server_fsi_dokuwiki 134.2.220.61:8150 check
  #server server_default 134.2.220.61:8001 check
